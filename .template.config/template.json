{
  "$schema": "http://json.schemastore.org/template",
  "author": "Nadeem Yaldani",
  "classifications": [ "Clean Architecture", "Web API", "CQRS" ],
  "identity": "CleanArchitecture.ServiceTemplate",
  "name": "Clean Architecture Template",
  "shortName": "clean-service",
  "sourceName": "{{MyServiceName}}",
  "preferNameDirectory": true,
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "symbols": {
    "MyServiceName": {
      "type": "parameter",
      "datatype": "string",
      "description": "The name of the service",
      "defaultValue": "MyServiceName",
      "isRequired": true,
      "replaces": "{{MyServiceName}}"
    },
    "ProjectStructure": {
      "type": "parameter",
      "datatype": "choice",
      "description": "Project structure type",
      "defaultValue": "Solution",
      "choices": [
        {
          "choice": "Solution",
          "description": "Create a new solution with all projects"
        },
        {
          "choice": "Standalone",
          "description": "Create projects without solution file"
        },
        {
          "choice": "Microservice",
          "description": "Add as microservice to existing solution"
        }
      ]
    },
    "SolutionPath": {
      "type": "parameter",
      "datatype": "string",
      "description": "Path to existing solution file (only for Standalone/Microservice)",
      "defaultValue": "",
      "replaces": "{{SolutionPath}}"
    },
    "IsSolution": {
      "type": "computed",
      "value": "(ProjectStructure == \"Solution\")"
    },
    "IsStandalone": {
      "type": "computed",
      "value": "(ProjectStructure == \"Standalone\")"
    },
    "IsMicroservice": {
      "type": "computed",
      "value": "(ProjectStructure == \"Microservice\")"
    },
    "HasSolutionPath": {
      "type": "computed",
      "value": "(SolutionPath != \"\")"
    },
    "UseEventHandler": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Include Event Handler project for async messaging",
      "defaultValue": "true"
    },
    "AddSampleEntity": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Include sample entity with CQRS implementation",
      "defaultValue": "true"
    },
    "DatabaseProvider": {
      "type": "parameter",
      "datatype": "choice",
      "description": "Database provider to use",
      "defaultValue": "SqlServer",
      "choices": [
        {
          "choice": "SqlServer",
          "description": "SQL Server"
        },
        {
          "choice": "PostgreSQL",
          "description": "PostgreSQL"
        },
        {
          "choice": "MySQL",
          "description": "MySQL"
        }
      ]
    },
    "IncludeDocker": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Include Docker support",
      "defaultValue": "true"
    },
    "IncludeTests": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Include test projects",
      "defaultValue": "true"
    }
  },
  "sources": [
    {
      "modifiers": [
        {
          "exclude": [
            ".git/**",
            ".gitignore"
          ]
        },
        {
          "condition": "(IsStandalone || IsMicroservice)",
          "exclude": [
            "*.sln"
          ]
        },
        {
          "condition": "(!UseEventHandler)",
          "exclude": [
            "{{MyServiceName}}.EventHandler/**"
          ]
        },
        {
          "condition": "(!IncludeDocker)",
          "exclude": [
            "Dockerfile",
            "docker-compose.yml",
            ".dockerignore"
          ]
        },
        {
          "condition": "(!IncludeTests)",
          "exclude": [
            "{{MyServiceName}}.Tests/**"
          ]
        }
      ]
    }
  ],
  "primaryOutputs": [
    {
      "path": "{{MyServiceName}}.Application/{{MyServiceName}}.Application.csproj",
      "condition": "true"
    },
    {
      "path": "{{MyServiceName}}.Domain/{{MyServiceName}}.Domain.csproj",
      "condition": "true"
    },
    {
      "path": "{{MyServiceName}}.Infrastructure/{{MyServiceName}}.Infrastructure.csproj",
      "condition": "true"
    },
    {
      "path": "{{MyServiceName}}.Contracts/{{MyServiceName}}.Contracts.csproj",
      "condition": "true"
    },
    {
      "path": "{{MyServiceName}}.Common/{{MyServiceName}}.Common.csproj",
      "condition": "true"
    },
    {
      "path": "{{MyServiceName}}.Presentation/{{MyServiceName}}.Presentation.csproj",
      "condition": "true"
    },
    {
      "path": "{{MyServiceName}}.EventHandler/{{MyServiceName}}.EventHandler.csproj",
      "condition": "(UseEventHandler)"
    },
    {
      "path": "{{MyServiceName}}.Tests/{{MyServiceName}}.Tests.csproj",
      "condition": "(IncludeTests)"
    }
  ],
  "postActions": [
    {
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true,
      "description": "Restore NuGet packages",
      "condition": "(IsSolution || IsStandalone)",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ]
    },
    {
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "continueOnError": true,
      "description": "Open solution in IDE",
      "condition": "(IsSolution)",
      "manualInstructions": [
        {
          "text": "Open {{MyServiceName}}.sln in your IDE"
        }
      ]
    },
    {
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "continueOnError": true,
      "description": "Add projects to existing solution",
      "condition": "((IsStandalone || IsMicroservice) && HasSolutionPath)",
      "manualInstructions": [
        {
          "text": "Run 'dotnet sln {{SolutionPath}} add {{MyServiceName}}.*/*.csproj' to add projects to solution"
        }
      ]
    },
    {
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "continueOnError": true,
      "description": "Manual solution addition required",
      "condition": "((IsStandalone || IsMicroservice) && !HasSolutionPath)",
      "manualInstructions": [
        {
          "text": "To add to existing solution, run: dotnet sln <path-to-solution> add {{MyServiceName}}.*/*.csproj"
        }
      ]
    }
  ]
}